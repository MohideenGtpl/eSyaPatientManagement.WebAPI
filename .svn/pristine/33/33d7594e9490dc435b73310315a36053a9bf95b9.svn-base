using eSyaPatientManagement.DL.Entities;
using eSyaPatientManagement.DO;
using eSyaPatientManagement.DO.StaticVariables;
using eSyaPatientManagement.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaPatientManagement.DL.Repository
{
    public class MasterRepository : IMasterRepository
    {
        private eSyaEnterpriseContext _context { get; set; }
        public MasterRepository(eSyaEnterpriseContext context)
        {
            _context = context;
        }

        public async Task<List<DO_IsdCodes>> GetISDCodes()
        {
            var pf = _context.GtEccncd
               .Where(w => w.ActiveStatus)
               .Select(s => new DO_IsdCodes
               {
                   IsdCode = s.Isdcode,
                   CountryCode = s.CountryCode,
                   CountryName = s.CountryName,
                   CurrencyCode = s.CurrencyCode,
                   MobileNumberPattern = s.MobileNumberPattern,
                   Nationality = s.Nationality
               })
               .ToListAsync();
            return await pf;
        }

        public async Task<List<DO_Place>> GetStateList(int isdCode)
        {
            var pf = _context.GtEccnpl
               .Where(w => w.ActiveStatus && w.PlaceType == PlaceTypeValues.State)
               .Select(s => new DO_Place
               {
                   IsdCode = s.Isdcode,
                   PlaceId = s.PlaceId,
                   PlaceName = s.PlaceName
               })
               .ToListAsync();
            return await pf;
        }

        public async Task<List<DO_Place>> GetCityList(int isdCode, int? stateCode)
        {
            var pf = _context.GtAddrin
                .Join(_context.GtEccnpl.Where(w=>w.PlaceType == PlaceTypeValues.City && w.ActiveStatus),
                    a => new { a.CityCode },
                    c => new { CityCode = c.PlaceId },
                    (a, c) => new { a, c})
               .Where(w => w.a.ActiveStatus && (w.a.StateCode == stateCode && stateCode == null) )
               .Select(s => new DO_Place
               {
                   IsdCode = s.a.Isdcode,
                   PlaceId = s.c.PlaceId,
                   PlaceName = s.c.PlaceName
               })
               .ToListAsync();
            return await pf;
        }

        public async Task<List<DO_AddressIN>> GetAreaList(int isdCode, int? stateCode, int? cityCode, string pincode)
        {
            var pf = _context.GtAddrin
               .Where(w => w.ActiveStatus 
                    && (w.StateCode == stateCode || stateCode == null)
                    && (w.CityCode == cityCode || cityCode == null)
                    && (w.Pincode == pincode || pincode == null))
               .Select(s => new DO_AddressIN
               {
                   IsdCode = s.Isdcode,
                   AreaCode = s.AreaCode,
                   AreaName = s.AreaName,
                   StateCode = s.StateCode,
                   CityCode = s.CityCode,
                   District = s.District,
                   Pincode = s.Pincode
               })
               .ToListAsync();
            return await pf;
        }

        public async Task<List<DO_PatientType>> GetPatientType()
        {
            var pt = _context.GtEcapcd
               .Where(w => w.CodeType == CodeTypeValues.PatientType && w.ActiveStatus)
               .Select(s => new DO_PatientType
               {
                   PatientTypeID = s.ApplicationCode,
                   PatientTypeDesc = s.CodeDesc
               })
               .ToListAsync();
            return await pt;
        }

        public async Task<List<DO_PatientCategory>> GetPatientCategory(int patientTypeId)
        {
            var pt = _context.GtEapcms
                .Join(_context.GtEcapcd.Where(w => w.CodeType == CodeTypeValues.PatientCategory && w.ActiveStatus),
                    p => new { p.PatientCategoryId },
                    a => new { PatientCategoryId = a.ApplicationCode},
                    (p,a) => new { p, a})
                .GroupJoin(_context.GtEcapcd.Where(w => w.CodeType == CodeTypeValues.RateType && w.ActiveStatus),
                    pc => new { pc.p.RateType },
                    a => new { RateType = a.ApplicationCode },
                    (pc, a) => new { pc, a = a.FirstOrDefault() }).DefaultIfEmpty()
               .Where(w => w.pc.p.TreatmentAllowedOp 
                    && w.pc.p.ActiveStatus)
               .Select(s => new DO_PatientCategory
               {
                   PatientCategoryID = s.pc.p.PatientCategoryId,
                   PatientCategoryDesc = s.pc.a.CodeDesc,
                   RateType = s.pc.p.RateType,
                   RateTypeDesc = s.a != null ? s.a.CodeDesc : "",
                   CareCardApplicable = s.pc.p.CareCardApplicable,
                   ServiceWiseRateType = s.pc.p.ServiceWiseRateType,
                   ValidateDocument = s.pc.p.ValidateDocument
               })
               .ToListAsync();
            return await pt;
        }

    }
}
